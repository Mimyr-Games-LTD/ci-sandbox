name: "Godot CI Build & Release (Spine)"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version for the build"
        required: true
      debug_build:
        description: "Whether to build in debug mode"
        required: true
        type: choice
        options: ['true', 'false']
        default: 'false'
      export_name:
        description: "exe name"
        required: false
        default: "the_vow"
      preset_name:
        description: "Godot export preset"
        required: true
        type: choice
        options: ['windows', 'linux']
        default: "windows"

permissions:
  contents: write
  packages: read

env:
  GODOT_VERSION: "4.4.1"
  GODOT_CHANNEL: "stable"

jobs:
  build:
    name: Build ${{ inputs.preset_name }} (.exe / .x86_64)
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/mimyr-games-ltd/ci-sandbox:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Prepare Godot environment
        shell: bash
        run: |
          set -eux
          HOME_DIR="$HOME"
          mkdir -p "$HOME_DIR/.local/share/godot/export_templates/"
          mkdir -p "$HOME_DIR/.config/godot"

          ROOT_TEMPL_DIR="/root/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_CHANNEL}"
          HOME_TEMPL_DIR="$HOME_DIR/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_CHANNEL}"

          if [ -d "$ROOT_TEMPL_DIR" ]; then
            rsync -a "$ROOT_TEMPL_DIR/" "$HOME_TEMPL_DIR/"
          else
            echo "⚠️ No export templates in $ROOT_TEMPL_DIR"
            ls -R /root/.local/share/godot || true
          fi

          if [ -f "/root/.config/godot/editor_settings-4.4.tres" ]; then
            cp "/root/.config/godot/editor_settings-4.4.tres" "$HOME/.config/godot/"
          fi

          echo "== Templates in $HOME_TEMPL_DIR =="
          ls -la "$HOME_TEMPL_DIR" || true

      - name: Ensure rcedit & wine configured
        shell: bash
        run: |
          set -eux
          ES="$HOME/.config/godot/editor_settings-4.4.tres"
          if [ ! -f "$ES" ]; then
            echo '[gd_resource type="EditorSettings" format=3]' > "$ES"
            echo '[resource]' >> "$ES"
          fi

          if [ ! -f /opt/rcedit/rcedit-x64.exe ]; then
            echo "Downloading missing rcedit..."
            wget -O /opt/rcedit/rcedit-x64.exe \
              https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe
          fi

          sed -i '/^export\/windows\/rcedit *=/d' "$ES" || true
          sed -i '/^export\/windows\/wine *=/d' "$ES" || true
          if command -v wine64 >/dev/null 2>&1; then
            echo 'export/windows/wine="/usr/bin/wine64"' >> "$ES"
          else
            echo 'export/windows/wine="/usr/bin/wine"' >> "$ES"
          fi
          echo 'export/windows/rcedit="/opt/rcedit/rcedit-x64.exe"' >> "$ES"

          echo "== Editor Settings =="
          cat "$ES"

      - name: Export build
        shell: bash
        env:
          PRESET: ${{ inputs.preset_name }}
          DEBUG_BUILD: ${{ inputs.debug_build }}
          EXPORT_NAME: ${{ inputs.export_name }}
          VERSION: ${{ inputs.version }}
        run: |
          set -eux
          mkdir -p build/${PRESET}
          EXPORT_DIR="$(realpath build)"
          MODE=$([ "$DEBUG_BUILD" = "true" ] && echo debug || echo release)
          OUT_PATH="${EXPORT_DIR}/${PRESET}/${EXPORT_NAME}"

          if [ "$PRESET" = "windows" ]; then
            OUT_PATH="${OUT_PATH}.exe"
          elif [ "$PRESET" = "linux" ]; then
            OUT_PATH="${OUT_PATH}.x86_64"
          fi

          echo "== Godot version =="
          godot --version

          godot --headless --verbose \
            --path . \
            --export-"${MODE}" "${PRESET}" \
            "${OUT_PATH}" \
            --ci

          cd "build/${PRESET}"
          zip -r "../build_${VERSION}_${PRESET}.zip" .
          cd - >/dev/null

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ inputs.version }}_${{ inputs.preset_name }}
          path: build/build_${{ inputs.version }}_${{ inputs.preset_name }}.zip
          if-no-files-found: error
          compression-level: 6


  release:
    name: Create Git Tag & Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build_${{ inputs.version }}_${{ inputs.preset_name }}
          path: ./release

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and push tag
        shell: bash
        run: |
          set -eux
          TAG="${{ inputs.version }}"
          git tag -d "$TAG" 2>/dev/null || true
          git fetch --tags --force
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            git push --delete origin "$TAG" || true
          fi
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag_name=$TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/build_${{ env.tag_name }}_${{ inputs.preset_name }}.zip
          tag_name: ${{ env.tag_name }}
          name: Release ${{ env.tag_name }}
          draft: false
          prerelease: ${{ inputs.debug_build }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build Godot

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version for the build"
        required: true
        default: 'test'
      debug_build:
        description: "Whether to build in debug mode"
        required: true
        type: choice
        options: ['true','false']
        default: 'false'
      export_name:
        description: exe name
        required: false
        default: the_vow
      preset_name:
        description: Godot export preset
        required: true
        type: choice
        options: ['windows','linux']
        default: 'windows'

permissions:
  packages: read
  contents: write
  
jobs:
  export:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/mimyr-games-ltd/ci-sandbox:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      EXPORT_NAME: ${{ inputs.export_name }}
      PRESET_NAME: ${{ inputs.preset_name }} 
      DEBUG_BUILD: ${{ inputs.debug_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

#      - name: Download official headless Godot 4.4.1 (with fallbacks)
#        shell: bash
#        run: |
#          set -eux
#          VER="4.4.1"
#          TUXFAM="https://downloads.tuxfamily.org/godotengine/${VER}/Godot_v${VER}-stable_linux.x86_64.zip"
#          GHREL="https://github.com/godotengine/godot/releases/download/${VER}-stable/Godot_v${VER}-stable_linux.x86_64.zip"
#          SMART="https://downloads.godotengine.org/?version=${VER}&flavor=stable&slug=linux.x86_64.zip&platform=linux.64"
#          
#          tmpdir="$(mktemp -d)"
#          cd "$tmpdir"
#          
#          # пробуем по очереди, сохраняя имя из Content-Disposition (-J)
#          for url in "$GHREL" "$SMART" "$TUXFAM"; do
#          echo "Trying: $url"
#          if curl -fLJO "$url"; then
#           echo "Downloaded from: $url"
#           break
#          fi
#          done
#          
#          # берём первый .zip в папке
#          ZIP="$(ls -1 *.zip | head -n1)"
#          [ -n "$ZIP" ] || { echo "No zip downloaded"; exit 1; }
#          unzip -q "$ZIP"
#          
#          # находим бинарь внутри архива и ставим его
#          BIN="$(find . -maxdepth 2 -type f -name 'Godot_v*linux.x86_64' | head -n1)"
#          [ -n "$BIN" ] || { echo "Godot binary not found in zip"; exit 1; }
#          install -m 0755 "$BIN" /usr/local/bin/godot-official
#          
#          /usr/local/bin/godot-official --version

#      - name: Import project
#        shell: bash
#        run: .github/scripts/godot_import.sh
#
#      - name: Open project
#        shell: bash
#        run: .github/scripts/run_godot_safe.sh --headless --path "$GITHUB_WORKSPACE" --verbose --editor --quit 
          
      - name: Export build with retries
        uses: nick-fields/retry@v3
        env:
          PROJECT_PATH: ${{ github.workspace }}
          PRESET_NAME: ${{ env.PRESET_NAME }}
          EXPORT_NAME: ${{ env.EXPORT_NAME }}
          DEBUG_BUILD: ${{ env.DEBUG_BUILD }}
        with:
          max_attempts: 3
          timeout_minutes: 10
          shell: bash
          command: |
            set -euo pipefail
            mkdir -p "build/${PRESET_NAME}"
            EXPORT_DIR="$(realpath build)"
            MODE=$([ "$DEBUG_BUILD" = "true" ] && echo debug || echo release)
            
            # Запускаем и сохраняем вывод; если команда упала, фиксируем код
            LOG="$(mktemp)"
            if ! godot --headless --verbose \
                  --path "$PROJECT_PATH" \
                  --export-"$MODE" "$PRESET_NAME" \
                  "$EXPORT_DIR/${PRESET_NAME}/${EXPORT_NAME}.exe" - --ci 2>&1 | tee "$LOG"; then
              STATUS=$?
            else
              STATUS=0
            fi
            
            # Если в логе есть “Program crashed”, принудительно валим шаг ненулевым кодом
            if grep -q "Program crashed with signal" "$LOG"; then
              echo "Detected crash in Godot. Forcing non-zero exit so retry can kick in."
              exit 139
            fi
            exit "$STATUS"


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ inputs.version }}_${{ inputs.preset_name }}
          path: build/${{ inputs.preset_name }}/*

      - name: Configure Git (for tagging)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set Version Tag
        shell: bash
        run: |
          if [ "${{ inputs.debug_build }}" = "true" ]; then
            echo "tag_name=pre-${{ inputs.version }}" >> $GITHUB_ENV
          else
            echo "tag_name=${{ inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        run: |
          git tag "${{ env.tag_name }}"
          git push origin "${{ env.tag_name }}"

      - name: Zip artifact for release
        run: |
          cd build/${{ inputs.preset_name }}
          zip -r "../../build_${{ env.tag_name }}_${{ inputs.preset_name }}.zip" .

      - name: Create Release and Upload
        uses: softprops/action-gh-release@v2
        with:
          files: build_${{ env.tag_name }}_${{ inputs.preset_name }}.zip
          tag_name: ${{ env.tag_name }}
          name: Release ${{ env.tag_name }}
          draft: false
          prerelease: ${{ inputs.debug_build }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: "godot-ci windows export"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 0.1.0)"
        required: true
        default: "test"
      export_name:
        description: "Output name (without .exe)"
        required: true
        default: "test-project"
      project_path:
        description: "Path to folder with project.godot ('.' if root)"
        required: true
        default: "test-project"

permissions:
  contents: write
  packages: read

env:
  GODOT_VERSION: "4.3"          # образ barichello/godot-ci:4.3
  EXPORT_NAME: ${{ inputs.export_name }}
  PROJECT_PATH: ${{ inputs.project_path }}

jobs:
  export-windows:
    name: Windows Export + Tag + Release
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Prepare Godot templates & settings for $HOME
        shell: bash
        run: |
          set -eux
          HOME_DIR="$HOME"
          mkdir -p "$HOME_DIR/.local/share/godot/export_templates/"
          mkdir -p "$HOME_DIR/.config/"
          
          if [ -d /root/.config/godot ]; then
            mv /root/.config/godot "$HOME_DIR/.config/godot"
          else
            mkdir -p "$HOME_DIR/.config/godot"
          fi
          
          if [ -d "/root/.local/share/godot/export_templates/${GODOT_VERSION}.stable" ]; then
            mv "/root/.local/share/godot/export_templates/${GODOT_VERSION}.stable" \
               "$HOME_DIR/.local/share/godot/export_templates/${GODOT_VERSION}.stable"
          else
            echo "⚠️ No templates found under /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable"
            ls -laR /root/.local/share/godot || true
          fi
          
          echo "== After move =="
          ls -la "$HOME_DIR/.local/share/godot/export_templates/${GODOT_VERSION}.stable" || true

      - name: Install wine + rcedit; write Editor Settings (Windows section)
        shell: bash
        run: |
          set -eux
          apt-get update
          apt-get install -y --no-install-recommends wine64 wget ca-certificates
          mkdir -p /opt/rcedit
          wget -O /opt/rcedit/rcedit-x64.exe \
            "https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe"

          # Godot 4.3 хранит настройки в editor_settings-4.3.tres
          ES="$HOME/.config/godot/editor_settings-4.3.tres"
          if [ ! -f "$ES" ]; then
            echo '[gd_resource type="EditorSettings" format=3]' > "$ES"
            echo '' >> "$ES"
            echo '[resource]' >> "$ES"
          fi

          # Прописываем wine + rcedit (перезаписывая существующие строки, если были)
          # Удалим старые ключи, если есть
          sed -i '/^export\/windows\/rcedit *=/d' "$ES" || true
          sed -i '/^export\/windows\/wine *=/d' "$ES" || true
          # Добавим наши
          if command -v wine64 >/dev/null 2>&1; then
            echo 'export/windows/wine="/usr/bin/wine64"' >> "$ES"
          else
            echo 'export/windows/wine="/usr/bin/wine"' >> "$ES"
          fi
          echo 'export/windows/rcedit="/opt/rcedit/rcedit-x64.exe"' >> "$ES"

          echo "== Editor Settings =="
          cat "$ES"

          echo "== Check templates =="
          ls -la "$HOME/.local/share/godot/export_templates/${GODOT_VERSION}.stable" || true

      - name: Windows Build
        shell: bash
        run: |
          set -eux
          mkdir -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          cd "$PROJECT_PATH"

          # В preset'ах barichello-образа имя Windows-пресета обычно "Windows Desktop"
          godot --headless --verbose \
            --export-release "windows" \
            "$EXPORT_DIR/windows/${EXPORT_NAME}.exe"

          # Упаковываем весь каталог windows (exe + pck + dll и т.п.)
          cd "$EXPORT_DIR/windows"
          zip -r "../build_${{ inputs.version }}_windows.zip" .
          cd - >/dev/null

      - name: Upload Artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ inputs.version }}_windows
          path: build/build_${{ inputs.version }}_windows.zip
          if-no-files-found: error
          compression-level: 6

      - name: Configure Git
        working-directory: ${{ github.workspace }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and push tag (idempotent)
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -eux
          TAG="${{ inputs.version }}"
          git tag -d "$TAG" 2>/dev/null || true
          git fetch --tags --force
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            git push --delete origin "$TAG" || true
          fi
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag_name=$TAG" >> $GITHUB_ENV

      - name: Create Release and Upload
        uses: softprops/action-gh-release@v2
        with:
          files: build/build_${{ env.tag_name }}_windows.zip
          tag_name: ${{ env.tag_name }}
          name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

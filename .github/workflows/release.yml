name: Build Godot

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 0.1.0)"
        required: true
        default: "test"
      debug_build:
        description: "Debug build?"
        required: true
        type: choice
        options: ["false", "true"]
        default: "false"
      export_name:
        description: "Output name (without extension)"
        required: true
        default: "the_vow"
      preset_name:
        description: "Godot export preset"
        required: true
        type: choice
        options: ["windows", "linux"]
        default: "windows"

permissions:
  contents: write
  packages: read

jobs:
  export:
    runs-on: ubuntu-24.04
    container:
      # Используем твой образ, где уже есть Godot + templates + rcedit + wine
      image: ghcr.io/mimyr-games-ltd/ci-sandbox:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      HOME: /github/home
      GODOT_VERSION: "4.4.1"
      GODOT_CHANNEL: "stable"
      EXPORT_NAME: ${{ inputs.export_name }}
      PRESET_NAME: ${{ inputs.preset_name }}
      DEBUG_BUILD: ${{ inputs.debug_build }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # === единственное, что нужно: скопировать templates и настройки в правильный HOME ===
      - name: Sync Godot templates and settings to $HOME
        shell: bash
        run: |
          set -eux
          ROOT_DIR="/root/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_CHANNEL}"
          HOME_DIR="$HOME/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_CHANNEL}"
          mkdir -p "$(dirname "$HOME_DIR")"
          if [ -d "$ROOT_DIR" ]; then
            echo "Copying export templates from $ROOT_DIR → $HOME_DIR"
            rsync -a "$ROOT_DIR/" "$HOME_DIR/"
          else
            echo "⚠️ WARNING: No export templates found under $ROOT_DIR"
            ls -R /root/.local/share/godot || true
          fi

          # переносим editor_settings, если они лежат в /root/.config/godot
          mkdir -p "$HOME/.config/godot"
          if [ -f "/root/.config/godot/editor_settings-4.tres" ]; then
            cp "/root/.config/godot/editor_settings-4.tres" "$HOME/.config/godot/editor_settings-4.tres"
          fi

          echo "Templates now under:"
          ls -la "$HOME/.local/share/godot/export_templates/${GODOT_VERSION}.${GODOT_CHANNEL}" || true
          echo "Editor Settings:"
          cat "$HOME/.config/godot/editor_settings-4.tres" || true

      - name: Export build
        shell: bash
        env:
          PROJECT_PATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          mkdir -p "build/${PRESET_NAME}"
          EXPORT_DIR="$(realpath build)"
          MODE=$([ "${DEBUG_BUILD}" = "true" ] && echo debug || echo release)

          OUT_PATH="${EXPORT_DIR}/${PRESET_NAME}/${EXPORT_NAME}"
          if [ "${PRESET_NAME}" = "windows" ]; then OUT_PATH="${OUT_PATH}.exe"; fi

          godot --headless --verbose \
            --path "${PROJECT_PATH}" \
            --export-"${MODE}" "${PRESET_NAME}" \
            "${OUT_PATH}" \
            --ci

          cd "build/${PRESET_NAME}"
          ZIP_NAME="../build_${{ inputs.version }}_${PRESET_NAME}.zip"
          zip -r "${ZIP_NAME}" .
          cd - >/dev/null

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ inputs.version }}_${{ inputs.preset_name }}
          path: build/build_${{ inputs.version }}_${{ inputs.preset_name }}.zip
          if-no-files-found: error
          compression-level: 6

      - name: Configure Git
        working-directory: ${{ github.workspace }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Decide tag name
        run: |
          if [ "${{ inputs.debug_build }}" = "true" ]; then
            echo "tag_name=pre-${{ inputs.version }}" >> $GITHUB_ENV
          else
            echo "tag_name=${{ inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Create and push tag
        working-directory: ${{ github.workspace }}
        run: |
          git tag -d "${{ env.tag_name }}" 2>/dev/null || true
          git fetch --tags
          if git rev-parse "${{ env.tag_name }}" >/dev/null 2>&1; then
            git push --delete origin "${{ env.tag_name }}" || true
          fi
          git tag "${{ env.tag_name }}"
          git push origin "${{ env.tag_name }}"

      - name: Create Release and Upload
        uses: softprops/action-gh-release@v2
        with:
          files: build/build_${{ env.tag_name }}_${{ inputs.preset_name }}.zip
          tag_name: ${{ env.tag_name }}
          name: Release ${{ env.tag_name }}
          draft: false
          prerelease: ${{ inputs.debug_build }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
